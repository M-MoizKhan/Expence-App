{"version":3,"sources":["History.js","Front.js","App.js","serviceWorker.js","index.js"],"names":["History","props","dtl","name","map","pro","className","text","amount","Front","income","expence","useState","key","tran","setTran","trans","setTrans","inco","setInco","expe","setExpe","bal","reduce","num","exp1","type","placeholder","onChange","e","target","value","Date","onClick","i_amount","Number","push","console","log","e_amount","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91de9738.chunk.js","sourcesContent":["import React from 'react';\r\n// import Front from './Front';\r\n\r\nexport default function History(props) {\r\n    const his = props.name;\r\n    const dtl = his.map(pro => { return(\r\n       <div> <span className='lft'> {pro.text} : </span> <span className='rit'> PKR:{pro.amount} </span> </div>\r\n    )});\r\n    return (\r\n        <div>\r\n            <h1 className='text'> History </h1>\r\n            <h3> {dtl} </h3>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport History from './History';\r\n\r\nexport default function Front() {\r\n    const [tran, setTran] = useState({\r\n        text : '',\r\n        amount : '',\r\n        key : ''\r\n    });\r\n\r\n    const [trans, setTrans] = useState([]);\r\n\r\n    const [inco, setInco] = useState([0]);\r\n    const [expe, setExpe] = useState([0]);\r\n\r\n    const addText = e => {\r\n        setTran({\r\n            text : e.target.value,\r\n            amount : tran.amount,\r\n            key : Date()\r\n        });\r\n    }\r\n\r\n    const addAmount = e => {\r\n        setTran({\r\n            text : tran.text,\r\n            amount : e.target.value,\r\n            key : Date()\r\n        });\r\n    }\r\n\r\n    const showInc = () => {\r\n        const i_amount = tran.amount;\r\n        let num = Number(i_amount);\r\n        inco.push(num);\r\n        setInco(inco);\r\n        trans.push(tran);\r\n        setTrans(trans);\r\n        setTran({\r\n        text : '',\r\n        amount : '',\r\n        key : ''\r\n        });\r\n        console.log(trans);\r\n        };\r\n        \r\n        const showExp = () => {\r\n        const e_amount = tran.amount;\r\n        let num = Number(e_amount);\r\n        expe.push(num);\r\n        setExpe(expe);    \r\n        trans.push(tran);\r\n        // console.log(expe);\r\n        setTrans(trans);\r\n        setTran({\r\n        text : '',\r\n        amount : '',\r\n        key : ''\r\n        });\r\n        console.log(trans);\r\n        };\r\n\r\n\r\n    // const incom = inco.map(inc => {\r\n        var income = 0;\r\n        income = inco.reduce((income, num) => income + num);\r\n        // income = inco.map(inc => income + inc); \r\n    // return ( income )} );\r\n    // console.log(incom);\r\n    \r\n    var expence = 0;\r\n    expence = expe.reduce((expence, exp1) => expence + exp1);\r\n\r\n    var bal = income - expence;\r\n\r\n    return (\r\n        <div className='container' >\r\n        <div className='row'>\r\n        <div className='col-sm-6'>\r\n        <div className='row' >\r\n            <h1 className='text'> Your Current Balance: <br /> PKR: {bal} </h1>\r\n            <div className='col-sm-6'>\r\n                <h3 className='text'>Income <br /> PKR: {income} </h3>\r\n            </div>\r\n            <div className='col-sm-6'>\r\n                <h3 className='text'> Expence <br /> PKR: {expence} </h3>\r\n            </div>\r\n            <h1 className='text-center'> Create Transactions </h1>\r\n            <div>\r\n            <input type='text' className='text inp' placeholder='Description' name='text' onChange={addText} value={tran.text} />\r\n            </div>\r\n            <br />\r\n            <input type='text' className='text inp' placeholder='Amount' onChange={addAmount} value={tran.amount} />\r\n            <br />\r\n            <br />\r\n            <input type='button' className='bt text' value='ADD INCOME' onClick={showInc} />\r\n            <input type='button' className='bt text' value='ADD EXPENCE' onClick={showExp} />\r\n            </div>\r\n            </div>\r\n            <div className='col-sm-6'>\r\n        <History name={trans} />\r\n      </div>\r\n      </div>\r\n         </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Front from './Front';\n// import History from './History';\nimport './Combine.css';\n\nexport default function App(){\nreturn(\n  <div className=''>\n   {/* <div className='container' > */}\n    {/* <div className='row border border-danger'> */}\n    <h1 className='text-center'> Expence Tracker App </h1>\n    {/* <div className='col-md-6'> */}\n        <Front />\n      {/* </div> */}\n    \n     {/* </div> */}\n   {/* </div>   */}\n   </div>\n)\n}\n\n\n\n// import React from 'react';\n// import ProductStore from './productStore';\n// import Navigate from './Navigate';\n// import Sun1 from './sun1';\n// import Sun2 from './sun2';\n// import Sun3 from './sun3';\n// import Sun4 from './sun4';\n// import Sun5 from './sun5';\n// import Sun6 from './sun6';\n\n// export default function App() {\n//   return (\n// <div>\n//   <Navigate />\n//   <h1> E-Commerce </h1>\n//   <div> <ProductStore /> </div>\n//   <Sun1 />\n//   <Sun2 />\n//   <Sun3 />\n//   <Sun4 />\n//   <Sun5 />\n//   <Sun6 />\n// </div>\n//   )\n// }\n\n\n\n\n// import logo from './logo.svg';\n// import './App.css';\n\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}